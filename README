今天第一次打算把Javascript代码提交到github上出现了一些问题
在github上创建好容器后，本地也创建了对应的文件夹打算把全部的内容提交上去，
发现没有添加成功，提示 error:src refspec master does not match any


如何在自己的服务器搭建github版本服务器呢？？？？这样的话，公司的东西就可以，隐藏了
 
 创建文件夹
 mkdir learngit
 进入文件夹
 cd learngit
 创建文件
 touch README


 把目录变成GIt可以管理的仓库
 git init

 //告诉git把文件添加到仓库，只添加到暂存区，可以多次add,一次commit
 commit后添加的是把暂存区的所有内容提交到当前分支
 git add .
 git commit -m "message"


 查看仓库的当前状态
 git status

 查看文件的不同
 git diff readme.txt
 查看文件的内容
 cat readme.txt

 查看提交历史，以便确定要退回到哪个命令
 git log --pretty=oneline


 版本回退
 HEAD:表示当前版本
 HEAD ^:表示上一个版本
 HEAD ^^:表示上上一个版本
 返回到上一个版本
 git reset --hard HEAD^
 查看修改命令历史
 git reflog 


 撤销修改
 git checkout --readme.txt
 本质是：用版本库里面的文件替换，工作区的文件的文件
 意思是：把readme.txt文件在工作区的修改全部撤销，这里有两种情况
 		 一种是，readme.txt被修改之后，还没有被放到暂存区，现在撤销修改就回到了和版本库一模一样的状态
 		 另一种,已经添加到暂存区，又做了修改，现在撤销就回到添加到暂存区后的状态
假设现在已经git add 了，把修改添加到暂存区了
先把暂存区的修改清空,工作区还有
git reset HEAD readme.txt
然后清空工作区
git checkout --readme.txt

如果已经把文件提交到版本库里面了。用以前的版本回退.不过前提是没有推送到远程库


从版本库中删除文件
git add test.txt
git commit -m "add test.txt"
//这句话是删除了本地工作区的文件test.txt.这样工作区和版本库里面的文件就不一样了
rm test.txt
//删除版本库里面的test.txt
git rm test.txt
git commit -m "remove test.txt"
如果误删了本地的文件，可以一键还原,用版本库里面的版本替换工作区的版本
git checkout --test.txt


搭建远程github服务器
ssh-keygen -t rsa -C "youremail@example.com"
在用户主目录里面.ssh目录，里面id_rsa和id_rsa.pub,一个私钥，一个公钥
添加密码的目的是保证的推送是我的电脑

创建一个远程库
关联一个远程库
git remote add origin git@github.com:ludongshalimin/javascriptlearn.git
关联后使用如下命令第一次推送master分支
git push -u origin master
以后使用命令，推送最新的修改
git push origin master


克隆远程库到本地
git clone git@github.com:ludongshalimin/javascriptlearn.git


分支管理
//创建并切换到dev分支
git checkout -b dev
相当于
git branch dev ; git checkout dev
git branch 列出所有的分支
分支已经修改完毕，我们要切换到主分支上
git checkout master
dev分支和master分支进行合并
git merge dev
git branch -d dev
当git 无法自动合并分支时，就必须首先解决冲突。解决冲突后在提交，合并完成
为什么会有冲突出现呢：1创建分支，在分支上进行了修改然后进行了提交
					  2切换到主分支，然后主分支上进行了修改，提交
					  3进行合并，出现冲突
解决方案：git status
		  直接插看文件进行修改，然后git add ;git commit -m "conflict fixed"
用git log --graph --pretty=online 查看分支合并的情况

//no-ff：表示禁用 fast forward
git merge --no-ff -m "merge message"
分支策略
master分支应该是非常稳定的，仅仅用来发布新版本，平时不能在上面干活
干活都在dev分支上，dev分支是不稳定的,
到某个时候，比如1.0版本发布的时候再把dev分支合并到master
和小伙伴们每个人都在dev分支下面干活，
每个人都有自己的分支，时不时的往dev分支上合并就可以




如何修复bug
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除
当手头工作没有完成的时候，先把工作现场git stash一下，然后去修复bug
修复后，再git stash pop,回到工作现场
也可以多次git stash 
用git list查看
然后 git stash apply stash@{0};进行哪一个进行弹出


新功能feature分支
开发一个新功能，最好新建一个分支
如果要丢弃一个没有被合并过的分支，可以通过 git branch -d <name>进行强制删除



多人协作
查看远程库的信息，使用git remote -v
从本地推送分支，使用git push origin branch-name 
如果推送失败，则因为远程分支，比你的本地更新，先用git pull抓取远程的新提交
解决的方法和分支管理中的解决冲突的方法完全一样。
在本地创建和远程分支对应的，使用git checkout -b brachname origin/branchname
建立本地分支和远程分支关联，
使用git branch --set-upstream branchname origin/branchname


标签管理

tag就是起一个有意义的名字，比如，v1.1，跟某个commit绑定在一起
对当前的最新提交打上标签
git tag v1.0
//如何对历史的提交版本打上标签
首先找到历史的版本
git log 

git tag v0.9 6224937
git push origin <tagname>可以推送一个本地标签
git push origin --tags推送全部未推送过的本地标签
git tag -d <tagname> 删除一个本地的标签


















